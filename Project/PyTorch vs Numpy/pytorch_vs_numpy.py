# -*- coding: utf-8 -*-
"""PyTorch vs NumPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YbN_sWP_cyuY48NLLQP4KRmgj3uFj9pq
"""

import numpy as np 
import torch 
import time

current_time = time.time() 

for i in range(1000):
    arr = np.zeros((4000,4000))
    brr = np.zeros((4000,4000))
    crr = np.zeros((4000,4000))
    drr = np.zeros((4000,4000))
    err = np.zeros((4000,4000))
    frr = np.zeros((4000,4000))
  #  grr = np.zeros((40000,40000))
  #  hrr = np.zeros((40000,40000))
  #  irr = np.zeros((40000,40000))
  #  jrr = np.zeros((40000,40000))
  #  krr = np.zeros((40000,40000))
  #  lrr = np.zeros((40000,40000))
  #  mrr = np.zeros((40000,40000))
  #  nrr = np.zeros((40000,40000))
    
finish_time = time.time()

print('cost time: ', finish_time- current_time)

current_time = time.time() 

for i in range(1000):
    arr = torch.empty((4000,4000))
    brr = torch.empty((4000,4000))
    crr = torch.empty((4000,4000))
    drr = torch.empty((4000,4000))
    err = torch.empty((4000,4000))
    frr = torch.empty((4000,4000))
  #  grr = np.zeros((40000,40000))
  #  hrr = np.zeros((40000,40000))
  #  irr = np.zeros((40000,40000))
  #  jrr = np.zeros((40000,40000))
  #  krr = np.zeros((40000,40000))
  #  lrr = np.zeros((40000,40000))
  #  mrr = np.zeros((40000,40000))
  #  nrr = np.zeros((40000,40000))
    
finish_time = time.time()

print('cost time: ', finish_time- current_time)



# 2. Array Operations

# torch 
x = torch.rand(10000,10000)
y = torch.rand(10000,10000)

current_time = time.time()

a = x+y 
b = x-y 
c = x*y 

end_time = time.time()
end_time - current_time

# numpy 
x = np.random.rand(10000,10000)
y = np.random.rand(10000,10000)

current_time = time.time()

a = x+y 
b = x-y 
c = x*y 

end_time = time.time()
end_time - current_time

# 3. array traversing

# numpy 

x = np.random.rand(1,1000000000)

current_time = time.time()

y = x[0, (len(x)//2)]

end_time = time.time()

end_time - current_time

# torch 

x = torch.rand(1,1000000000)

current_time = time.time()

y = x[0, (len(x)//2)]

end_time = time.time()

end_time - current_time



# Linear Algebra

# using both 

# numpy -> pytorch
tensor = torch.from_numpy(np_array)

#  pytorch -> numpy 
ndarray = tensor.numpy()

# new tensor 

# numpy 
zeros = np.zeros((4,4))
ones = np.ones((4,4))
random = np.random.random((4,4))

# pytorch 
zeros = torch.zeros(4,4)
ones = torch.ones(4,4)
random = torch.rand(4,4)



# Basic Linear Algebra

# indexing 

# numpy 
array[0,0]
array[0,:]

# pytorch 
torch[0,0]
torch[0,:]

# addition & subtraction 

# numpy 
array1 + array2 
array1 - array2

# pytorch 
tensor1 + tensor2 
tensor1- tensor2

# multiplication 

# numpy 
array*array 
# matrix multiplication 
array@ array

# pytorch 
tensor * tensor 
# matrix multiplication 
tensor@tensor

# shape and dimensions

# numpy 
shape = array.shape 
num_dim = array.ndim 

# pytorch 
shape = tensor.shape 
shape = tensor.size()
num_dim = tensor.dim()

# reshaping 

# numpy 
new_array = array.reshape((8,2))

# pytorch 
new_tensor = tensor.view(8,2)

# sum / mean / std 

# numpy 
array.sum() # sum 
array.mean() # mean 
array.std() # std 


# pytorch 
tensor.sum() 
tensor.mean() 
tensor.std()

# transpose 

# numpy 
array.T
array.transpose()

# pytorch 
tensor.t()

# saving to disk 

# numpy 
np.save('file.npy', array)
np.load('file.npy')

# pytorch 
torch.save(tensor, 'file')
torch.load('file')

